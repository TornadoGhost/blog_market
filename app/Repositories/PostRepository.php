<?php


namespace App\Repositories;


use App\Models\KeyWord;
use App\Models\Post;
use App\Models\User;
use App\Repositories\Interfaces\PostRepositoryInterface;
use Carbon\Carbon;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Support\Arr;
use Illuminate\Support\Str;

class PostRepository extends CoreRepository implements PostRepositoryInterface
{

    public function getModel()
    {
        return Post::class;
    }

    public function start()
    {
        return parent::start(); // TODO: Change the autogenerated stub
    }

    public function getAll()
    {
        return $this->start()->orderBy('id', 'DESC')->paginate(6);
    }
    public function getById($id)
    {
        return parent::getById($id); // TODO: Change the autogenerated stub
    }
    public function create($request){
        $newWords = array();
        foreach ($request->keyWords as $word)
        {
            $word_id = KeyWord::query()->create([
                'word' => $word,
            ]);
            array_push($newWords, $word_id->id);
        }

        $req = $this->start()->create([
            'title' => $request->title,
            'content' => $request->content,
            'category_id' => $request->category_id,
            'user_id' => $request->user_id,
            'description' => $request->description,
            'slug' => Str::slug($request->title, '-'),
        ]);
        $req->tags()->sync($request->input('tags'));
        $req->undercategories()->sync($request->input('undercategories'));
        $req->keyWords()->sync($newWords);
    }

    public function showPost($slugTitle, $slugCategory){
        return Post::query()
            ->where('slug', '=', $slugTitle)
            ->get();
    }

    public function postSearching($request){
        return $this->start()
            ->where('title', 'LIKE', "%$request->search_query%")
            ->orWhere('content', 'LIKE', "%$request->search_query%")
            ->orWhereHas('category', function (Builder $query) use ($request) {
                $query->where('title', 'LIKE', "%$request->search_query%");
            })
            ->orWhereHas('tags', function (Builder $query) use ($request) {
                $query->where('title', 'LIKE', "%$request->search_query%");
            })
            ->orWhereHas('undercategories', function (Builder $query) use ($request) {
                $query->where('title', 'LIKE', "%$request->search_query%");
            })
            ->orWhereHas('keyWords', function (Builder $query) use ($request) {
                $query->where('word', 'LIKE', "%$request->search_query%");
            })
            ->paginate(6);
    }

    public function postSyncUnderCategory($request, $id){
        return $this->start()->find($id)->undercategories()->sync($request->undercategories);
    }

    public function postSyncTags($request, $id){
        return $this->start()->find($id)->tags()->sync($request->tags);
    }

    public function postUpdate($request, $id){
        return $this->start()->where('id', '=', $id)->update([
            'title' => $request->title,
            'description' => $request->description,
            'content' => $request->input('content'),
            'category_id' => $request->category_id,
        ]);
    }

    public function showUnapprovedPosts(){
        return $this->start()->where('approved', '=', 0)->paginate(5);
    }

    public function postApprove($request){
        return  $this->start()->where('id', '=', $request->id)->update([
            'approved' => $request->approved,
        ]);
    }

    public function deleteNotApprovedPost($request){
        Post::query()->find($request->id)->tags()->detach();
        Post::query()->find($request->id)->undercategories()->detach();
        Post::query()->where('id', '=', $request->id)->delete();
    }
}
